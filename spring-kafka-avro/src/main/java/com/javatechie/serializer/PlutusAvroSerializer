package com.plutus.kafka.serializer;

import lombok.extern.slf4j.Slf4j;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.specific.SpecificDatumWriter;
import org.apache.avro.specific.SpecificRecord;
import org.apache.kafka.common.errors.SerializationException;
import org.apache.kafka.common.serialization.Serializer;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

/**
 * Generic Avro serializer for Plutus Kafka producers.
 * <p>
 * Converts Avro record classes into binary format using their schema,
 * enabling Kafka producers to send Avro-encoded data to Kafka topics.
 *
 * @param <T> Any Avro-generated class that extends {@link SpecificRecord}
 */
@Slf4j
public class PlutusAvroSerializer<T extends SpecificRecord> implements Serializer<T> {

    @Override
    public byte[] serialize(String topic, T data) {
        if (data == null) {
            log.debug("PlutusAvroSerializer: Received null data for topic '{}'", topic);
            return null;
        }

        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            DatumWriter<T> datumWriter = new SpecificDatumWriter<>(data.getSchema());
            BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(outputStream, null);
            datumWriter.write(data, encoder);
            encoder.flush();
            return outputStream.toByteArray();
        } catch (IOException e) {
            log.error("PlutusAvroSerializer: Failed to serialize record for topic '{}'", topic, e);
            throw new SerializationException("Error serializing Avro record of type: " + data.getClass().getName(), e);
        }
    }
}
