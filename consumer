package com.kotak.orchestrator.orchestrator.consumer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kotak.orchestrator.orchestrator.dto.PlutusFinacleData;
import com.kotak.orchestrator.orchestrator.entity.PlutusFinacleDataEntity;
import com.kotak.orchestrator.orchestrator.repository.PlutusFinacleDataRepository;
import com.kotak.orchestrator.orchestrator.validator.PlutusDataValidator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@Service
@Slf4j
@RequiredArgsConstructor
public class PlutusFinacleDataConsumer extends GenericAvroConsumer<PlutusFinacleData> {

    private final PlutusFinacleDataRepository repository;
    private final PlutusDataValidator plutusDataValidator;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @KafkaListener(topics = "${topic.plutus-finacle:plutus-finacle-topic}", groupId = "plutus-finacle-group")
    public void listen(ConsumerRecord<String, PlutusFinacleData> record) {
        consume(record);
    }

    @Override
    protected void handleMessage(PlutusFinacleData data, ConsumerRecord<String, PlutusFinacleData> record) {
        try {
            plutusDataValidator.validate(data);

            PlutusFinacleDataEntity entity = new PlutusFinacleDataEntity();

            // Mandatory Fields
            entity.setTranId(toStr(data.getTranId()));
            entity.setTranDate(toStr(data.getTranDate()));
            entity.setTranAmt(data.getTranAmt());
            entity.setAcid(toStr(data.getAcid()));
            entity.setForacid(toStr(data.getForacid()));
            entity.setRefNum(toStr(data.getRefNum()));

            // Optional Fields
            entity.setAcctName(toStr(data.getAcctName()));
            entity.setLastTranDateCr(toStr(data.getLastTranDateCr()));
            entity.setPartTranSrlNum(toStr(data.getPartTranSrlNum()));
            entity.setDelFlg(toStr(data.getDelFlg()));
            entity.setTranType(toStr(data.getTranType()));
            entity.setTranSubType(toStr(data.getTranSubType()));
            entity.setPartTranType(toStr(data.getPartTranType()));
            entity.setGlSubHeadCode(toStr(data.getGlSubHeadCode()));
            entity.setValueDate(toStr(data.getValueDate()));
            entity.setTranParticular(toStr(data.getTranParticular()));
            entity.setEntryDate(toStr(data.getEntryDate()));
            entity.setPstdDate(toStr(data.getPstdDate()));
            entity.setInstrmntType(toStr(data.getInstrmntType()));
            entity.setInstrmntDate(toStr(data.getInstrmntDate()));
            entity.setInstrmntNum(toStr(data.getInstrmntNum()));
            entity.setTranRmks(toStr(data.getTranRmks()));
            entity.setCustId(toStr(data.getCustId()));
            entity.setBrCode(toStr(data.getBrCode()));
            entity.setCrncyCode(toStr(data.getCrncyCode()));
            entity.setTranCrncyCode(toStr(data.getTranCrncyCode()));
            entity.setRefAmt(data.getRefAmt());
            entity.setSolId(toStr(data.getSolId()));
            entity.setBankCode(toStr(data.getBankCode()));
            entity.setTreaRefNum(toStr(data.getTreaRefNum()));
            entity.setReversalDate(toStr(data.getReversalDate()));
            entity.setReceivedAt(LocalDateTime.now());

            // Serialize without Avro schema metadata
            Map<String, Object> rawMap = new HashMap<>();
            rawMap.put("foracid", toStr(data.getForacid()));
            rawMap.put("tranId", toStr(data.getTranId()));
            rawMap.put("tranDate", toStr(data.getTranDate()));
            rawMap.put("acctName", toStr(data.getAcctName()));
            rawMap.put("tranAmt", data.getTranAmt());
            rawMap.put("refNum", toStr(data.getRefNum()));
            // Add more if needed...

            entity.setRawData(objectMapper.writeValueAsString(rawMap));

            repository.save(entity);
            log.info("Saved PlutusFinacleData to database with tranId: {}", entity.getTranId());

        } catch (IllegalArgumentException e) {
            log.warn("Validation failed for record: {}", e.getMessage());
        } catch (JsonProcessingException e) {
            log.error("Error serializing rawData to JSON: {}", e.getMessage(), e);
        } catch (Exception e) {
            log.error("Error saving record: {}", e.getMessage(), e);
        }
    }

    private String toStr(CharSequence input) {
        return input != null ? input.toString() : null;
    }
}
